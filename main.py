# Импорт необходимых модулей (в данном случае не требуется, оставлено для будущих расширений)
import sys


# Класс Hero представляет героя в игре
class Hero:
    # Метод инициализации (конструктор) класса Hero
    def __init__(self, name):
        """
        Конструктор класса Hero
        :param name: Имя героя (строка)
        """
        self.name = name  # Устанавливаем имя героя
        self.health = 100  # Устанавливаем начальное здоровье (100 единиц)
        self.attack_power = 20  # Устанавливаем силу атаки (20 единиц)

    # Метод для атаки другого героя
    def attack(self, other):
        """
        Атака другого героя
        :param other: Объект класса Hero (противник)
        :return: Оставшееся здоровье противника
        """
        other.health -= self.attack_power  # Уменьшаем здоровье противника
        return other.health  # Возвращаем новое значение здоровья

    # Метод проверки, жив ли герой
    def is_alive(self):
        """
        Проверка, жив ли герой
        :return: True если здоровье > 0, иначе False
        """
        return self.health > 0  # Возвращаем результат проверки здоровья


# Класс Game управляет игровым процессом
class Game:
    # Конструктор класса Game
    def __init__(self, player_name):
        """
        Инициализация игры
        :param player_name: Имя игрока (строка)
        """
        self.player = Hero(player_name)  # Создаем героя для игрока
        self.computer = Hero("Компьютер")  # Создаем героя для компьютера

    # Основной метод, запускающий игру
    def start(self):
        """Метод для запуска и управления игровым процессом"""
        current_turn = 0  # Счетчик ходов (для определения очередности атак)

        # Основной игровой цикл - продолжается, пока оба героя живы
        while self.player.is_alive() and self.computer.is_alive():
            # Если ход четный - атакует игрок
            if current_turn % 2 == 0:
                self.player.attack(self.computer)  # Игрок атакует компьютер
                # Выводим информацию об атаке (max(0,...) предотвращает отрицательное здоровье)
                print(
                    f"{self.player.name} атаковал(а)! У {self.computer.name} осталось {max(0, self.computer.health)} здоровья")
            else:
                # Если ход нечетный - атакует компьютер
                self.computer.attack(self.player)  # Компьютер атакует игрока
                print(
                    f"{self.computer.name} атаковал! У {self.player.name} осталось {max(0, self.player.health)} здоровья")

            current_turn += 1  # Увеличиваем счетчик ходов

        # Определяем победителя (последний оставшийся в живых)
        winner = self.player.name if self.player.is_alive() else self.computer.name
        print(f"\nПобедитель: {winner}!")  # Объявляем победителя


def get_player_name():
    """
    Функция для безопасного ввода имени игрока с валидацией
    :return: Корректное имя игрока (строка)
    """
    while True:  # Бесконечный цикл, пока не будет введено корректное имя
        try:
            # Получаем ввод от пользователя, удаляем пробелы по краям
            name = input("Введите имя вашего героя (от 2 до 20 символов): ").strip()

            # Проверка на пустое имя
            if not name:
                raise ValueError("Имя не может быть пустым")

            # Проверка минимальной длины имени
            if len(name) < 2:
                raise ValueError("Имя слишком короткое (минимум 2 символа)")

            # Проверка максимальной длины имени
            if len(name) > 20:
                raise ValueError("Имя слишком длинное (максимум 20 символов)")

            # Проверка на допустимые символы
            if not name.isprintable():
                raise ValueError("Имя содержит недопустимые символы")

            return name  # Возвращаем корректное имя

        # Обработка ошибок валидации
        except ValueError as e:
            print(f"Ошибка: {e}. Пожалуйста, попробуйте еще раз.")

        # Обработка неожиданных ошибок (например, прерывание)
        except Exception as e:
            print(f"Неожиданная ошибка: {e}. Пожалуйста, попробуйте еще раз.")


# Основная точка входа в программу
if __name__ == "__main__":
    try:
        # Получаем имя игрока с валидацией
        player_name = get_player_name()

        # Создаем экземпляр игры
        game = Game(player_name)

        # Запускаем игровой процесс
        game.start()

    # Обработка прерывания программы (Ctrl+C)
    except KeyboardInterrupt:
        print("\nИгра прервана пользователем")
        sys.exit(0)  # Корректный выход из программы

    # Обработка других неожиданных ошибок
    except Exception as e:
        print(f"Критическая ошибка: {e}")
        sys.exit(1)  # Выход с кодом ошибки